# -*- coding: utf-8 -*-
\"\"\"\nSupabase Database Client\nKripto sinyalleri ve işlemler için kalıcı veri depolama\n\"\"\"\n\nimport os\nimport json\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional, Tuple\nimport pytz\nfrom supabase import create_client, Client\nfrom dotenv import load_dotenv\n\n# .env dosyasını yükle\nload_dotenv()\n\nclass SupabaseManager:\n    \"\"\"Supabase veri yönetimi\"\"\"\n    \n    def __init__(self):\n        # Supabase bağlantı bilgileri\n        self.url = os.getenv(\"SUPABASE_URL\", \"https://rkjndkslanwyoyefsicd.supabase.co\")\n        self.key = os.getenv(\"SUPABASE_KEY\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJram5ka3NsYW53eW95ZWZzaWNkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkzOTY2MDcsImV4cCI6MjA3NDk3MjYwN30.XZd3mmNDhKHj2zIBovsFasj1S7LEhkHNvO79_OGJHxo\")\n        \n        # Supabase client oluştur\n        self.supabase: Client = create_client(self.url, self.key)\n        \n    def get_portfolio_state(self) -> Dict:\n        \"\"\"Get current portfolio state\"\"\"\n        try:\n            result = self.supabase.table('portfolio_state').select('*').limit(1).execute()\n            if result.data:\n                return result.data[0]\n            # Initialize with $1000\n            init_data = {\n                'total_balance': 1000.0,\n                'available_balance': 1000.0,\n                'used_balance': 0.0,\n                'total_pnl': 0.0\n            }\n            self.supabase.table('portfolio_state').insert(init_data).execute()\n            return init_data\n        except Exception as e:\n            print(f\"Portfolio state error: {e}\")\n            return {\n                'total_balance': 1000.0,\n                'available_balance': 1000.0,\n                'used_balance': 0.0,\n                'total_pnl': 0.0\n            }\n\n    def update_portfolio_balance(self, pnl_usd: float, position_size: float, is_opening: bool):\n        \"\"\"Update portfolio after opening/closing position\"\"\"\n        try:\n            state = self.get_portfolio_state()\n            if is_opening:\n                state['available_balance'] -= position_size\n                state['used_balance'] += position_size\n            else:\n                state['available_balance'] += position_size + pnl_usd\n                state['used_balance'] -= position_size\n                state['total_pnl'] += pnl_usd\n                state['total_balance'] += pnl_usd\n            \n            # Update the record (using the ID if available)\n            if 'id' in state:\n                self.supabase.table('portfolio_state').update(state).eq('id', state['id']).execute()\n            else:\n                # If no ID exists, use a different approach\n                # Update the first record in the table (there should only be one)\n                first_record = self.supabase.table('portfolio_state').select('id').limit(1).execute()\n                if first_record.data:\n                    self.supabase.table('portfolio_state').update(state).eq('id', first_record.data[0]['id']).execute()\n        except Exception as e:\n            print(f\"Portfolio update error: {e}\")\n        \n    def add_signal(self, symbol: str, signal_type: str, message: str, \n                   price: float, indicators: Dict, system: str = None) -> bool:\n        \"\"\"Add signal only if not duplicate - Enhanced duplicate prevention\"\"\"\n        try:\n            # Check for recent identical signal (within 10 minutes for better prevention)\n            ten_min_ago = (datetime.now(pytz.utc) - timedelta(minutes=10)).isoformat()\n            \n            # Check for any recent signal of same type for same symbol\n            existing = self.supabase.table('crypto_signals')\\\n                .select('*')\\\n                .eq('symbol', symbol)\\\n                .eq('signal_type', signal_type)\\\n                .eq('system', system)\\\n                .gte('timestamp', ten_min_ago)\\\n                .execute()\n            \n            if existing.data:\n                print(f\"Duplicate signal skipped: {symbol} {signal_type} (found {len(existing.data)} recent signals)\")\n                # Update the existing signal with new price if different\n                for item in existing.data:\n                    if abs(item['price'] - price) > 0.000001:  # Significant price change\n                        print(f\"Updating signal for {symbol} with new price: ${price}\")\n                        self.supabase.table('crypto_signals').update({\n                            'price': price,\n                            'rsi': indicators.get('rsi'),\n                            'adx': indicators.get('adx'),\n                            'vwap': indicators.get('vwap'),\n                            'atr': indicators.get('atr'),\n                            'timestamp': datetime.now(pytz.utc).isoformat()\n                        }).eq('id', item['id']).execute()\n                        return True\n                return False\n            \n            # Additional check: If we have an open position, don't add entry signals\n            if signal_type in ['LONG_ENTRY', 'SHORT_ENTRY']:\n                open_positions = self.supabase.table('open_trades')\\\n                    .select('*')\\\n                    .eq('symbol', symbol)\\\n                    .eq('system', system)\\\n                    .execute()\n                \n                if open_positions.data:\n                    print(f\"Entry signal skipped: {symbol} {signal_type} (position already open)\")\n                    return False\n            \n            data = {\n                'symbol': symbol,\n                'signal_type': signal_type,\n                'message': message,\n                'price': price,\n                'rsi': indicators.get('rsi'),\n                'adx': indicators.get('adx'),\n                'vwap': indicators.get('vwap'),\n                'atr': indicators.get('atr'),\n                'system': system,\n                'timestamp': datetime.now(pytz.utc).isoformat()\n            }\n            \n            result = self.supabase.table('crypto_signals').insert(data).execute()\n            print(f\"Signal added: {symbol} {signal_type} @ ${price:.6f}\")\n            return len(result.data) > 0\n            \n        except Exception as e:\n            print(f\"Supabase sinyal ekleme hatası: {e}\")\n            return False\n    \n    def open_trade(self, symbol: str, trade_type: str, entry_price: float, \n                   atr_value: float = 0, stop_loss: float = 0, take_profit: float = 0, system: str = None) -> bool:\n        \"\"\"Open trade with capital management\"\"\"\n        try:\n            POSITION_SIZE = 50.0  # 50 USD per trade\n            LEVERAGE = 5  # 5x leverage\n            \n            # Check available balance\n            portfolio = self.get_portfolio_state()\n            if portfolio['available_balance'] < POSITION_SIZE:\n                print(f\"Insufficient balance: ${portfolio['available_balance']:.2f} < ${POSITION_SIZE}\")\n                return False\n            \n            data = {\n                'symbol': symbol,\n                'trade_type': trade_type,\n                'entry_price': entry_price,\n                'entry_time': datetime.now(pytz.utc).isoformat(),\n                'status': 'OPEN',\n                'atr_value': atr_value,\n                'stop_loss': stop_loss,\n                'take_profit': take_profit,\n                'position_size': POSITION_SIZE,\n                'leverage': LEVERAGE,\n                'system': system\n            }\n            \n            result = self.supabase.table('open_trades').insert(data).execute()\n            if len(result.data) > 0:\n                self.update_portfolio_balance(0, POSITION_SIZE, is_opening=True)\n                return True\n            return False\n            \n        except Exception as e:\n            print(f\"Supabase işlem açma hatası: {e}\")\n            return False\n    \n    def close_trade(self, symbol: str, exit_price: float, system: str = 'HYBRID_CRYPTO') -> Optional[Dict]:\n        \"\"\"Close trade and calculate PnL with 5x leverage\"\"\"\n        try:\n            print(f\"Attempting to close trade: {symbol} @ ${exit_price}\")\n            \n            open_trade_result = self.supabase.table('open_trades')\\\n                .select('*')\\\n                .eq('symbol', symbol)\\\n                .eq('system', system)\\\n                .execute()\n            \n            if not open_trade_result.data:\n                print(f\"No open trade found for {symbol} in system {system}\")\n                return None\n            \n            trade = open_trade_result.data[0]\n            print(f\"Found open trade: {trade}\")\n            \n            entry_price = float(trade['entry_price'])\n            trade_type = trade['trade_type']\n            position_size = trade.get('position_size', 50.0)\n            leverage = trade.get('leverage', 5)\n            \n            print(f\"Closing {trade_type} position: Entry ${entry_price}, Exit ${exit_price}\")\n            \n            # Calculate percentage PnL\n            if trade_type == 'LONG':\n                pnl_percent = ((exit_price - entry_price) / entry_price) * 100\n            else:\n                pnl_percent = ((entry_price - exit_price) / entry_price) * 100\n            \n            # Calculate USD PnL with leverage\n            pnl_usd = (pnl_percent / 100) * position_size * leverage\n            \n            print(f\"Calculated P&L: {pnl_percent:.2f}% = ${pnl_usd:.2f}\")\n            \n            closed_trade_data = {\n                'symbol': symbol,\n                'trade_type': trade_type,\n                'entry_price': entry_price,\n                'entry_time': trade['entry_time'],\n                'exit_price': exit_price,\n                'exit_time': datetime.now(pytz.utc).isoformat(),\n                'pnl_percent': round(pnl_percent, 2),\n                'pnl_usd': round(pnl_usd, 2),\n                'position_size': position_size,\n                'leverage': leverage,\n                'status': 'CLOSED',\n                'system': system\n            }\n            \n            # Insert into closed trades\n            self.supabase.table('closed_trades').insert(closed_trade_data).execute()\n            print(f\"Trade added to closed_trades: {closed_trade_data}\")\n            \n            # Delete from open trades\n            delete_result = self.supabase.table('open_trades').delete().eq('symbol', symbol).eq('system', system).execute()\n            print(f\"Deleted from open_trades: {delete_result.data}\")\n            \n            # Update portfolio balance\n            self.update_portfolio_balance(pnl_usd, position_size, is_opening=False)\n            print(f\"Portfolio balance updated: P&L ${pnl_usd:.2f}\")\n            \n            return closed_trade_data\n            \n        except Exception as e:\n            print(f\"Error closing trade for {symbol}: {e}\")\n            return None\n    \n    def get_current_signals(self) -> Dict:\n        \"\"\"Mevcut sinyalleri getir (son 200 adet) - Sistem bazlı\"\"\"\n        try:\n            result = self.supabase.table('crypto_signals').select('*').order('timestamp', desc=True).limit(200).execute()\n            \n            signals = {}\n            seen_keys = set()  # Tekrar eden sinyalleri engellemek için\n            \n            for row in result.data:\n                symbol = row['symbol']\n                system = row.get('system', 'UNKNOWN')\n                \n                # Sadece sembol ve sinyal türüne göre uniq anahtar oluştur\n                signal_key = f\"{symbol}_{row['signal_type']}\"\n                \n                # Eğer bu anahtara sahip bir sinyal zaten varsa ve daha yeni değilse, atla\n                if signal_key in seen_keys:\n                    continue\n                    \n                # Yeni bir sinyal anahtarı ekliyoruz\n                seen_keys.add(signal_key)\n                \n                signals[f\"{signal_key}_{row['timestamp']}\"] = {\n                    'symbol': symbol,\n                    'system': system,\n                    'signal_type': row['signal_type'],\n                    'message': row['message'],\n                    'price': row['price'],\n                    'timestamp': row['timestamp'],\n                    'rsi': row.get('rsi'),\n                    'adx': row.get('adx'),\n                    'vwap': row.get('vwap'),\n                    'atr': row.get('atr')\n                }\n            \n            return signals\n            \n        except Exception as e:\n            print(f\"Supabase sinyal getirme hatası: {e}\")\n            return {}\n    \n    def get_open_trades(self) -> Dict:\n        \"\"\"Açık işlemleri getir\"\"\"\n        try:\n            result = self.supabase.table('open_trades').select('*').execute()\n            \n            open_trades = {}\n            for row in result.data:\n                symbol = row['symbol']\n                open_trades[symbol] = {\n                    'symbol': symbol,\n                    'type': row['trade_type'],\n                    'entry_price': row['entry_price'],\n                    'entry_time': row['entry_time'],\n                    'status': row['status'],\n                    'position_size': row.get('position_size', 50.0),\n                    'leverage': row.get('leverage', 5),\n                    'stop_loss': row.get('stop_loss', 0),\n                    'take_profit': row.get('take_profit', 0),\n                    'system': row.get('system', 'HYBRID_CRYPTO')\n                }\n            \n            return open_trades\n            \n        except Exception as e:\n            print(f\"Supabase açık işlem getirme hatası: {e}\")\n            return {}\n    \n    def get_closed_trades(self) -> List[Dict]:\n        \"\"\"Kapalı işlemleri getir\"\"\"\n        try:\n            result = self.supabase.table('closed_trades').select('*').order('exit_time', desc=True).execute()\n            \n            closed_trades = []\n            for row in result.data:\n                closed_trades.append({\n                    'symbol': row['symbol'],\n                    'type': row['trade_type'],\n                    'entry_price': row['entry_price'],\n                    'entry_time': row['entry_time'],\n                    'exit_price': row['exit_price'],\n                    'exit_time': row['exit_time'],\n                    'pnl_percent': row['pnl_percent'],\n                    'pnl_usd': row.get('pnl_usd', 0.0),\n                    'position_size': row.get('position_size', 50.0),\n                    'leverage': row.get('leverage', 5),\n                    'status': row['status'],\n                    'system': row.get('system', 'HYBRID_CRYPTO')\n                })\n            \n            return closed_trades\n            \n        except Exception as e:\n            print(f\"Supabase kapalı işlem getirme hatası: {e}\")\n            return []\n    \n    def get_position_status(self, symbol: str, system: str = 'HYBRID_CRYPTO') -> str:\n        \"\"\"Sembol için pozisyon durumu - Sistem bazlı\"\"\"\n        try:\n            # Sistem filtresi ile sorgu yap\n            result = self.supabase.table('open_trades').select('trade_type').eq('symbol', symbol).eq('system', system).execute()\n\n            if result.data:\n                return result.data[0]['trade_type']\n            return 'NONE'\n\n        except Exception as e:\n            print(f\"Supabase pozisyon durumu getirme hatası: {e}\")\n            return 'NONE'\n    \n    def get_summary(self) -> Dict:\n        \"\"\"Özet istatistikler\"\"\"\n        try:\n            closed_trades = self.get_closed_trades()\n            \n            if not closed_trades:\n                return {\n                    'total_trades': 0,\n                    'winning_trades': 0,\n                    'losing_trades': 0,\n                    'win_rate': 0,\n                    'total_pnl': 0,\n                    'avg_pnl': 0\n                }\n            \n            winning = [t for t in closed_trades if t['pnl_percent'] > 0]\n            losing = [t for t in closed_trades if t['pnl_percent'] <= 0]\n            total_pnl = sum(t['pnl_percent'] for t in closed_trades)\n            \n            return {\n                'total_trades': len(closed_trades),\n                'winning_trades': len(winning),\n                'losing_trades': len(losing),\n                'win_rate': round((len(winning) / len(closed_trades)) * 100, 2),\n                'total_pnl': round(total_pnl, 2),\n                'avg_pnl': round(total_pnl / len(closed_trades), 2)\n            }\n            \n        except Exception as e:\n            print(f\"Supabase özet getirme hatası: {e}\")\n            return {\n                'total_trades': 0,\n                'winning_trades': 0,\n                'losing_trades': 0,\n                'win_rate': 0,\n                'total_pnl': 0,\n                'avg_pnl': 0\n            }\n    \n    def clear_old_signals(self, days: int = 7):\n        \"\"\"Eski sinyalleri temizle (varsayılan 7 gün)\"\"\"\n        try:\n            cutoff_date = datetime.now(pytz.utc) - timedelta(days=days)\n            cutoff_iso = cutoff_date.isoformat()\n            \n            result = self.supabase.table('crypto_signals').delete().lt('timestamp', cutoff_iso).execute()\n            print(f\"{len(result.data)} eski sinyal temizlendi\")\n            \n        except Exception as e:\n            print(f\"Supabase eski sinyal temizleme hatası: {e}\")\n\n# Test fonksiyonu\ndef test_supabase_connection():\n    \"\"\"Supabase bağlantısını test et\"\"\"\n    try:\n        manager = SupabaseManager()\n        \n        # Test sinyali ekle\n        test_indicators = {\n            'rsi': 65.5,\n            'adx': 25.3,\n            'vwap': 45000.123456\n        }\n        \n        success = manager.add_signal(\n            'TESTUSDT', \n            'LONG_ENTRY', \n            'Test Sinyali', \n            45000.0, \n            test_indicators\n        )\n        \n        if success:\n            print(\"✅ Supabase bağlantısı başarılı!\")\n            return True\n        else:\n            print(\"❌ Supabase bağlantısı başarısız!\")\n            return False\n            \n    except Exception as e:\n        print(f\"❌ Supabase test hatası: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    test_supabase_connection()